##############
### Runner ###
##############
.runner_deploy: &runner_deploy
  variables:
    DOCKER_HOST: unix:///var/run/docker.sock
  tags:
    - deploy
    - pisensor
    - swarmmanager
  only:
    - master

.runtime:
  script: &runtime
#    - ./start.sh stop || true
    - docker login -u gitlab-ci-token -p ${CI_BUILD_TOKEN} ${CI_REGISTRY}
    - sed -e "s|DOMAIN|$SERVER_DOMAIN|g" template/${COMPOSE_FILE} > ${COMPOSE_FILE}
    - sed -i -e "s|IMAGEBASE|$IMAGEBASE|g" ${COMPOSE_FILE}
    - sed -i -e "s|IMAGEBASE|$IMAGEBASE|g" montreal.json
    - docker stack rm ${STACK_NAME} || true
    - docker stack deploy --with-registry-auth --prune --resolve-image never --compose-file ${COMPOSE_FILE} ${STACK_NAME}

#####################################
stages:
  - prepare
  - start
  - stop
  - cleanup

.global_variables: &global_variables
    DOCKER_HOST: unix:///var/run/docker.sock
    SERVER_DOMAIN: pisensor.ub.uni-bamberg.de
    COMPOSE_HTTP_TIMEOUT: "300"
    IMAGEBASE: ${CI_REGISTRY}/${CI_PROJECT_NAMESPACE}
    #docker-registry.rz.uni-bamberg.de/ub/pi-sensor
    NETWORK_OPTIONS: --opt encrypted --attachable --driver overlay

#####################
### Manage stacks ###
#####################

network create:
  stage: prepare
  <<: *runner_deploy
  variables:
    <<: *global_variables
    GIT_STRATEGY: none
  script:
    - docker network create ${NETWORK_OPTIONS} traefik-net || true
    - docker network create ${NETWORK_OPTIONS} nsq-net || true

network rm:
  stage: cleanup
  when: manual
  <<: *runner_deploy
  variables:
    <<: *global_variables
    GIT_STRATEGY: none
  script:
    - docker network rm nsq-net
    - docker network rm traefik-net || true

#####################################
secret create:
  stage: prepare
  <<: *runner_deploy
  variables:
    <<: *global_variables
    GIT_STRATEGY: none
  script:
    - docker secret rm PRTG_CREDENTIALS || true
    - echo -n ${PRTG_CREDENTIALS} | docker secret create PRTG_CREDENTIALS - || true
    - docker secret rm montreal.json || true
    - docker secret create montreal.json montreal.json || true

secret rm:
  stage: cleanup
  when: manual
  <<: *runner_deploy
  variables:
    <<: *global_variables
    GIT_STRATEGY: none
  script:
    - docker secret rm PRTG_CREDENTIALS
    - docker secret rm montreal.json

#####################################
prtg create:
  stage: start
  when: manual
  <<: *runner_deploy
  variables:
    <<: *global_variables
    STACK_NAME:  prtg
    COMPOSE_FILE: prtg.yml
  script: *runtime

prtg rm:
  stage: stop
  when: manual
  <<: *runner_deploy
  variables:
    <<: *global_variables
    STACK_NAME:  prtg
    GIT_STRATEGY: none
  script:
    - docker stack rm ${STACK_NAME}

#####################################
json create:
  stage: start
  when: manual
  <<: *runner_deploy
  variables:
    <<: *global_variables
    STACK_NAME:  json
    COMPOSE_FILE: json.yml
  script: *runtime

json rm:
  stage: stop
  when: manual
  <<: *runner_deploy
  variables:
    <<: *global_variables
    STACK_NAME:  json
    GIT_STRATEGY: none
  script:
    - docker stack rm ${STACK_NAME}

#####################################
web create:
  stage: start
  when: manual
  <<: *runner_deploy
  variables:
    <<: *global_variables
    STACK_NAME:  web
    COMPOSE_FILE: web.yml
  script: *runtime

web rm:
  stage: stop
  when: manual
  <<: *runner_deploy
  variables:
    <<: *global_variables
    STACK_NAME:  web
    GIT_STRATEGY: none
  script:
    - docker stack rm ${STACK_NAME}

#####################################
sensor create:
  stage: start
  when: manual
  <<: *runner_deploy
  variables:
    <<: *global_variables
    STACK_NAME:  sensor
    COMPOSE_FILE: sensor.yml
  script: *runtime

sensor rm:
  stage: stop
  when: manual
  <<: *runner_deploy
  variables:
    <<: *global_variables
    STACK_NAME:  sensor
    GIT_STRATEGY: none
  script:
    - docker stack rm ${STACK_NAME}

#####################################
nsq create:
  stage: start
  when: manual
  <<: *runner_deploy
  variables:
    <<: *global_variables
    STACK_NAME:  nsq
    COMPOSE_FILE: nsq.yml
  script: *runtime

nsq rm:
  stage: stop
  when: manual
  <<: *runner_deploy
  variables:
    <<: *global_variables
    STACK_NAME:  nsq-cli nsq-admin nsq
    GIT_STRATEGY: none
  script:
    - docker stack rm ${STACK_NAME}

#####################################
nsqcli create:
  stage: start
  when: manual
  <<: *runner_deploy
  variables:
    <<: *global_variables
    STACK_NAME:  nsq-cli
    COMPOSE_FILE: nsq-cli.yml
  script: *runtime

nsqcli rm:
  stage: stop
  when: manual
  <<: *runner_deploy
  variables:
    <<: *global_variables
    STACK_NAME:  nsq-cli
    GIT_STRATEGY: none
  script:
    - docker stack rm ${STACK_NAME}

#####################################
nsqadmin create:
  stage: start
  when: manual
  <<: *runner_deploy
  variables:
    <<: *global_variables
    STACK_NAME:  nsq-admin
    COMPOSE_FILE: nsq-admin.yml
  script: *runtime

nsqadmin rm:
  stage: stop
  when: manual
  <<: *runner_deploy
  variables:
    <<: *global_variables
    STACK_NAME:  nsq-admin
    GIT_STRATEGY: none
  script:
    - docker stack rm ${STACK_NAME}
